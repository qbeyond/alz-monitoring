//create datatable with a row for each entry in the terraform map
let  LogTable = datatable(WinEventId:int, Severity:string, WinSource:string, Area:string)[
%{ for event_info in all_events ~}
${event_info.event_id}, "${event_info.severity}", "${event_info.winsource}", "${event_info.area}",
%{endfor ~}
];
let VMs = (MonitoringResources_CL
| where TimeGenerated > ago(13h)
| where type_s in~ ("microsoft.compute/virtualmachines", "microsoft.hybridcompute/machines", "microsoft.compute/virtualmachinescalesets")
| extend id_s = toupper(id_s)
| summarize arg_max(TimeGenerated,*) by id_s)
| project TimeGenerated, id_s, name_s, tags_managedby_s, tags_alerting_s;
Event|join kind=inner LogTable on $left.EventID == $right.WinEventId and $left.Source == $right.WinSource
| where TimeGenerated > ago(10m)
| extend affected_object = toupper(tostring(split(_ResourceId, "/")[-1]))
| summarize arg_max(TimeGenerated, *) by affected_object, EventID, Source, Severity 
| extend _ResourceId = toupper(_ResourceId)
| project _ResourceId, affected_object, EventLog, Source, EventID, RenderedDescription, Severity, Area, WinSource
| join kind= leftouter VMs on $left._ResourceId == $right.id_s
| where tags_managedby_s =~ "q.beyond" or isempty(tags_managedby_s)
| where tags_alerting_s =~ "enabled" or isempty(tags_alerting_s)
| extend state = Severity
| extend monitor_package = "AZ_SC_ManagedOSWindows"
| extend monitor_name = strcat("AZ_", Area, "_EVENTLOG_", EventID)
| extend monitor_description = "Search the Windows event log for specific entries."
| extend script_name = "n/a"
| extend script_version = "n/a"
| extend threshold = "n/a"
| extend value = "n/a"
| extend affected_entity = affected_object
| extend additional_information = strcat("Windows log entry has been found. EventLogType: ", EventLog, "; Source: ", Source, "; EventID: ", EventID, "; Description: ", RenderedDescription, "; Check the System, please. Managed by: ",(tags_managedby_s),"." )
| project _ResourceId, RawData = strcat("TimeGenerated:", now(), ";_ResourceId:", _ResourceId, ";state:", state, ";affected_object:", affected_object, ";monitor_package:", monitor_package, ";monitor_name:", monitor_name, ";monitor_description:", monitor_description, ";script_name:", script_name, ";script_version:", script_version, ";threshold:", threshold, ";value:", value, ";affected_entity:", affected_entity, ";additional_information:", additional_information)